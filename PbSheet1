//Pb 1

def square(n: Int) : Int = {
  n*n
}

def remainder3(n: Int) : Int = {
  n-(n/3)*3
}

def maxsquare(n: Int) : Int ={
  val i=0
  while(i*i<=n){
	i=i+1;
  }
  (i-1)*(i-1)
}

//Pb 3

object Milk{

  def findMax(a : Array[Int]) : Int = {
    val n = a.size
    var max = 0; var i = 0
    while(i < n){
      //Invariant I: max=max(a[0..i)) && 0<=i<=n
      //Variant n-i
      if(a(i)>max) max=a(i)
      i += 1
    }
    max
  }

//Pb 5

def fib(n: Int) : Int={
	if(n==0) 0
	if(n==1) 1
	fib(n-1)+fib(n-2)
}

//Pb 6

def fib(n: Int) : Int={
	if(n==0) 0
	if(n==1) 1
	val t = 0
	val i = 1
	val parent = 0
	val target = 1
	while (i<n){
	t=target
	target=parent+target
	parent=t
	i=i-1;
	}
 target
}

//Pb 7

def main(x : Int, y : Int) ={
	val q = 0
	val r = 0
	while(x>=y){
		x=x-y
		q=q+1
	}
	r=x
	println(q)
	println(r)
}

//Pb 8

def commonDiv(m : Int, n : Int) ={
	val t = 0
	while(n){
		while(m>=n){
			m=m-n
		}
		t = m
		m = n
		n = t
	}
	m
}

//Pb 9

def nrHits(a : Array[Int]) : Int = {
	val n= a.size; val total=1; val i =1; val hit=a(0)
	while(i<n){
		if(a(i)>hit){
			hit=a(i)
			total=total+1
		}
	i=i+1;
	}
	total
}
